/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 ./public/models/src/iconYT.glb --output models/4096/IconYT.tsx -r public/models4096 --transform -t --resolution 4096 --keepmaterials -m --keepmeshes --keepnames -s 
Files: ./public/models/src/iconYT.glb [880.02KB] > C:\Users\Tommy\Documents\GitHub\frederic-cartier\models\4096\models/4096/iconYT-transformed.glb [101.7KB] (88%)
*/

import * as THREE from 'three';
import React, { useRef } from 'react';
import { useGLTF } from '@react-three/drei';
import { GLTF } from 'three-stdlib';
import { useFrame } from '@react-three/fiber';

type GLTFResult = GLTF & {
	nodes: {
		youtube: THREE.Mesh;
	};
	materials: {
		yt: THREE.MeshStandardMaterial;
	};
	// animations: GLTFAction[]
};

type ContextType = Record<string, React.ForwardRefExoticComponent<JSX.IntrinsicElements['mesh']>>;

export function Model(props: JSX.IntrinsicElements['group']) {
	const { nodes, materials } = useGLTF('/../../models/4096/iconYT-transformed.glb') as GLTFResult;
	return (
		<group {...props} dispose={null}>
			<mesh
				name="youtube"
				castShadow
				receiveShadow
				geometry={nodes.youtube.geometry}
				material={materials.yt}
				userData={{ name: 'youtube' }}
			/>
		</group>
	);
}

useGLTF.preload('/../../models/4096/iconYT-transformed.glb');
