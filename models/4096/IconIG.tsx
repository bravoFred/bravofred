/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 ./public/models/src/iconIG.glb --output models/4096/IconIG.tsx -r public/models4096 --transform -t --resolution 4096 --keepmaterials -m --keepmeshes --keepnames -s 
Files: ./public/models/src/iconIG.glb [15.58MB] > C:\Users\Tommy\Documents\GitHub\frederic-cartier\models\4096\models/4096/iconIG-transformed.glb [757.79KB] (95%)
*/

import * as THREE from 'three';
import React, { useRef } from 'react';
import { useGLTF } from '@react-three/drei';
import { GLTF } from 'three-stdlib';
import { useFrame } from '@react-three/fiber';
import { MathUtils } from 'three';

type GLTFResult = GLTF & {
	nodes: {
		icon: THREE.Mesh;
		ringInner: THREE.Mesh;
		outerRing: THREE.Mesh;
	};
	materials: {
		metal: THREE.MeshStandardMaterial;
	};
	// animations: GLTFAction[];
};

type ContextType = Record<string, React.ForwardRefExoticComponent<JSX.IntrinsicElements['mesh']>>;
export function Model(
	props: JSX.IntrinsicElements['group'] & {
		iconHovered: React.MutableRefObject<boolean>;
	}
) {
	const { nodes, materials } = useGLTF('/../../models/4096/iconIG-transformed.glb') as GLTFResult;
	const lightRef = useRef<THREE.PointLight>();
	const { iconHovered } = props;
	const [showLight, setShowLight] = React.useState(false);
	useFrame(() => {
		// iconHovered.current ? setShowLight(true) : setShowLight(false);

		if (lightRef.current) {
			lightRef.current.intensity = MathUtils.lerp(
				lightRef.current.intensity,
				iconHovered.current ? 0.25 : 0,
				0.1
			);
		}
	});
	return (
		<group {...props} dispose={null}>
			{/* {showLight && (
				<pointLight
					ref={lightRef}
					name="Point"
					intensity={0}
					decay={3}
					position={[0.099, 0.999, 0.332]}
					rotation={[-Math.PI / 2, 0, 0]}
					scale={0.199}
					userData={{ name: 'Point' }}
				/>
			)} */}
			<mesh
				name="icon"
				castShadow
				receiveShadow
				geometry={nodes.icon.geometry}
				material={materials.metal}
				userData={{ name: 'icon' }}
			/>
			<mesh
				name="ringInner"
				castShadow
				receiveShadow
				geometry={nodes.ringInner.geometry}
				material={materials.metal}
				userData={{ name: 'ringInner' }}
			/>
			<mesh
				name="outerRing"
				castShadow
				receiveShadow
				geometry={nodes.outerRing.geometry}
				material={materials.metal}
				userData={{ name: 'outerRing' }}
			/>
		</group>
	);
}

useGLTF.preload('/../../models/4096/iconIG-transformed.glb');
